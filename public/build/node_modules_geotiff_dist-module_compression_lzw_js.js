"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_geotiff_dist-module_compression_lzw_js"],{

/***/ "./node_modules/geotiff/dist-module/compression/lzw.js":
/*!*************************************************************!*\
  !*** ./node_modules/geotiff/dist-module/compression/lzw.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LZWDecoder)
/* harmony export */ });
/* harmony import */ var _basedecoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./basedecoder.js */ "./node_modules/geotiff/dist-module/compression/basedecoder.js");


const MIN_BITS = 9;
const CLEAR_CODE = 256; // clear code
const EOI_CODE = 257; // end of information
const MAX_BYTELENGTH = 12;

function getByte(array, position, length) {
  const d = position % 8;
  const a = Math.floor(position / 8);
  const de = 8 - d;
  const ef = (position + length) - ((a + 1) * 8);
  let fg = (8 * (a + 2)) - (position + length);
  const dg = ((a + 2) * 8) - position;
  fg = Math.max(0, fg);
  if (a >= array.length) {
    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');
    return EOI_CODE;
  }
  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);
  chunk1 <<= (length - de);
  let chunks = chunk1;
  if (a + 1 < array.length) {
    let chunk2 = array[a + 1] >>> fg;
    chunk2 <<= Math.max(0, (length - dg));
    chunks += chunk2;
  }
  if (ef > 8 && a + 2 < array.length) {
    const hi = ((a + 3) * 8) - (position + length);
    const chunk3 = array[a + 2] >>> hi;
    chunks += chunk3;
  }
  return chunks;
}

function appendReversed(dest, source) {
  for (let i = source.length - 1; i >= 0; i--) {
    dest.push(source[i]);
  }
  return dest;
}

function decompress(input) {
  const dictionaryIndex = new Uint16Array(4093);
  const dictionaryChar = new Uint8Array(4093);
  for (let i = 0; i <= 257; i++) {
    dictionaryIndex[i] = 4096;
    dictionaryChar[i] = i;
  }
  let dictionaryLength = 258;
  let byteLength = MIN_BITS;
  let position = 0;

  function initDictionary() {
    dictionaryLength = 258;
    byteLength = MIN_BITS;
  }
  function getNext(array) {
    const byte = getByte(array, position, byteLength);
    position += byteLength;
    return byte;
  }
  function addToDictionary(i, c) {
    dictionaryChar[dictionaryLength] = c;
    dictionaryIndex[dictionaryLength] = i;
    dictionaryLength++;
    return dictionaryLength - 1;
  }
  function getDictionaryReversed(n) {
    const rev = [];
    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {
      rev.push(dictionaryChar[i]);
    }
    return rev;
  }

  const result = [];
  initDictionary();
  const array = new Uint8Array(input);
  let code = getNext(array);
  let oldCode;
  while (code !== EOI_CODE) {
    if (code === CLEAR_CODE) {
      initDictionary();
      code = getNext(array);
      while (code === CLEAR_CODE) {
        code = getNext(array);
      }

      if (code === EOI_CODE) {
        break;
      } else if (code > CLEAR_CODE) {
        throw new Error(`corrupted code at scanline ${code}`);
      } else {
        const val = getDictionaryReversed(code);
        appendReversed(result, val);
        oldCode = code;
      }
    } else if (code < dictionaryLength) {
      const val = getDictionaryReversed(code);
      appendReversed(result, val);
      addToDictionary(oldCode, val[val.length - 1]);
      oldCode = code;
    } else {
      const oldVal = getDictionaryReversed(oldCode);
      if (!oldVal) {
        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);
      }
      appendReversed(result, oldVal);
      result.push(oldVal[oldVal.length - 1]);
      addToDictionary(oldCode, oldVal[oldVal.length - 1]);
      oldCode = code;
    }

    if (dictionaryLength + 1 >= (2 ** byteLength)) {
      if (byteLength === MAX_BYTELENGTH) {
        oldCode = undefined;
      } else {
        byteLength++;
      }
    }
    code = getNext(array);
  }
  return new Uint8Array(result);
}

class LZWDecoder extends _basedecoder_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  decodeBlock(buffer) {
    return decompress(buffer, false).buffer;
  }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2dlb3RpZmZfZGlzdC1tb2R1bGVfY29tcHJlc3Npb25fbHp3X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTJDOztBQUUzQztBQUNBLHdCQUF3QjtBQUN4QixzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUixzREFBc0QsS0FBSztBQUMzRCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLDJEQUEyRCxTQUFTLElBQUksaUJBQWlCLGNBQWMsU0FBUztBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLHlCQUF5Qix1REFBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nZW90aWZmL2Rpc3QtbW9kdWxlL2NvbXByZXNzaW9uL2x6dy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZURlY29kZXIgZnJvbSAnLi9iYXNlZGVjb2Rlci5qcyc7XG5cbmNvbnN0IE1JTl9CSVRTID0gOTtcbmNvbnN0IENMRUFSX0NPREUgPSAyNTY7IC8vIGNsZWFyIGNvZGVcbmNvbnN0IEVPSV9DT0RFID0gMjU3OyAvLyBlbmQgb2YgaW5mb3JtYXRpb25cbmNvbnN0IE1BWF9CWVRFTEVOR1RIID0gMTI7XG5cbmZ1bmN0aW9uIGdldEJ5dGUoYXJyYXksIHBvc2l0aW9uLCBsZW5ndGgpIHtcbiAgY29uc3QgZCA9IHBvc2l0aW9uICUgODtcbiAgY29uc3QgYSA9IE1hdGguZmxvb3IocG9zaXRpb24gLyA4KTtcbiAgY29uc3QgZGUgPSA4IC0gZDtcbiAgY29uc3QgZWYgPSAocG9zaXRpb24gKyBsZW5ndGgpIC0gKChhICsgMSkgKiA4KTtcbiAgbGV0IGZnID0gKDggKiAoYSArIDIpKSAtIChwb3NpdGlvbiArIGxlbmd0aCk7XG4gIGNvbnN0IGRnID0gKChhICsgMikgKiA4KSAtIHBvc2l0aW9uO1xuICBmZyA9IE1hdGgubWF4KDAsIGZnKTtcbiAgaWYgKGEgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgY29uc29sZS53YXJuKCdyYW4gb2ZmIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBiZWZvcmUgZmluZGluZyBFT0lfQ09ERSAoZW5kIG9uIGlucHV0IGNvZGUpJyk7XG4gICAgcmV0dXJuIEVPSV9DT0RFO1xuICB9XG4gIGxldCBjaHVuazEgPSBhcnJheVthXSAmICgoMiAqKiAoOCAtIGQpKSAtIDEpO1xuICBjaHVuazEgPDw9IChsZW5ndGggLSBkZSk7XG4gIGxldCBjaHVua3MgPSBjaHVuazE7XG4gIGlmIChhICsgMSA8IGFycmF5Lmxlbmd0aCkge1xuICAgIGxldCBjaHVuazIgPSBhcnJheVthICsgMV0gPj4+IGZnO1xuICAgIGNodW5rMiA8PD0gTWF0aC5tYXgoMCwgKGxlbmd0aCAtIGRnKSk7XG4gICAgY2h1bmtzICs9IGNodW5rMjtcbiAgfVxuICBpZiAoZWYgPiA4ICYmIGEgKyAyIDwgYXJyYXkubGVuZ3RoKSB7XG4gICAgY29uc3QgaGkgPSAoKGEgKyAzKSAqIDgpIC0gKHBvc2l0aW9uICsgbGVuZ3RoKTtcbiAgICBjb25zdCBjaHVuazMgPSBhcnJheVthICsgMl0gPj4+IGhpO1xuICAgIGNodW5rcyArPSBjaHVuazM7XG4gIH1cbiAgcmV0dXJuIGNodW5rcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kUmV2ZXJzZWQoZGVzdCwgc291cmNlKSB7XG4gIGZvciAobGV0IGkgPSBzb3VyY2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBkZXN0LnB1c2goc291cmNlW2ldKTtcbiAgfVxuICByZXR1cm4gZGVzdDtcbn1cblxuZnVuY3Rpb24gZGVjb21wcmVzcyhpbnB1dCkge1xuICBjb25zdCBkaWN0aW9uYXJ5SW5kZXggPSBuZXcgVWludDE2QXJyYXkoNDA5Myk7XG4gIGNvbnN0IGRpY3Rpb25hcnlDaGFyID0gbmV3IFVpbnQ4QXJyYXkoNDA5Myk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IDI1NzsgaSsrKSB7XG4gICAgZGljdGlvbmFyeUluZGV4W2ldID0gNDA5NjtcbiAgICBkaWN0aW9uYXJ5Q2hhcltpXSA9IGk7XG4gIH1cbiAgbGV0IGRpY3Rpb25hcnlMZW5ndGggPSAyNTg7XG4gIGxldCBieXRlTGVuZ3RoID0gTUlOX0JJVFM7XG4gIGxldCBwb3NpdGlvbiA9IDA7XG5cbiAgZnVuY3Rpb24gaW5pdERpY3Rpb25hcnkoKSB7XG4gICAgZGljdGlvbmFyeUxlbmd0aCA9IDI1ODtcbiAgICBieXRlTGVuZ3RoID0gTUlOX0JJVFM7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TmV4dChhcnJheSkge1xuICAgIGNvbnN0IGJ5dGUgPSBnZXRCeXRlKGFycmF5LCBwb3NpdGlvbiwgYnl0ZUxlbmd0aCk7XG4gICAgcG9zaXRpb24gKz0gYnl0ZUxlbmd0aDtcbiAgICByZXR1cm4gYnl0ZTtcbiAgfVxuICBmdW5jdGlvbiBhZGRUb0RpY3Rpb25hcnkoaSwgYykge1xuICAgIGRpY3Rpb25hcnlDaGFyW2RpY3Rpb25hcnlMZW5ndGhdID0gYztcbiAgICBkaWN0aW9uYXJ5SW5kZXhbZGljdGlvbmFyeUxlbmd0aF0gPSBpO1xuICAgIGRpY3Rpb25hcnlMZW5ndGgrKztcbiAgICByZXR1cm4gZGljdGlvbmFyeUxlbmd0aCAtIDE7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RGljdGlvbmFyeVJldmVyc2VkKG4pIHtcbiAgICBjb25zdCByZXYgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gbjsgaSAhPT0gNDA5NjsgaSA9IGRpY3Rpb25hcnlJbmRleFtpXSkge1xuICAgICAgcmV2LnB1c2goZGljdGlvbmFyeUNoYXJbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmV2O1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGluaXREaWN0aW9uYXJ5KCk7XG4gIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xuICBsZXQgY29kZSA9IGdldE5leHQoYXJyYXkpO1xuICBsZXQgb2xkQ29kZTtcbiAgd2hpbGUgKGNvZGUgIT09IEVPSV9DT0RFKSB7XG4gICAgaWYgKGNvZGUgPT09IENMRUFSX0NPREUpIHtcbiAgICAgIGluaXREaWN0aW9uYXJ5KCk7XG4gICAgICBjb2RlID0gZ2V0TmV4dChhcnJheSk7XG4gICAgICB3aGlsZSAoY29kZSA9PT0gQ0xFQVJfQ09ERSkge1xuICAgICAgICBjb2RlID0gZ2V0TmV4dChhcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2RlID09PSBFT0lfQ09ERSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA+IENMRUFSX0NPREUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb3JydXB0ZWQgY29kZSBhdCBzY2FubGluZSAke2NvZGV9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB2YWwgPSBnZXREaWN0aW9uYXJ5UmV2ZXJzZWQoY29kZSk7XG4gICAgICAgIGFwcGVuZFJldmVyc2VkKHJlc3VsdCwgdmFsKTtcbiAgICAgICAgb2xkQ29kZSA9IGNvZGU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2RlIDwgZGljdGlvbmFyeUxlbmd0aCkge1xuICAgICAgY29uc3QgdmFsID0gZ2V0RGljdGlvbmFyeVJldmVyc2VkKGNvZGUpO1xuICAgICAgYXBwZW5kUmV2ZXJzZWQocmVzdWx0LCB2YWwpO1xuICAgICAgYWRkVG9EaWN0aW9uYXJ5KG9sZENvZGUsIHZhbFt2YWwubGVuZ3RoIC0gMV0pO1xuICAgICAgb2xkQ29kZSA9IGNvZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG9sZFZhbCA9IGdldERpY3Rpb25hcnlSZXZlcnNlZChvbGRDb2RlKTtcbiAgICAgIGlmICghb2xkVmFsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQm9ndXMgZW50cnkuIE5vdCBpbiBkaWN0aW9uYXJ5LCAke29sZENvZGV9IC8gJHtkaWN0aW9uYXJ5TGVuZ3RofSwgcG9zaXRpb246ICR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgICBhcHBlbmRSZXZlcnNlZChyZXN1bHQsIG9sZFZhbCk7XG4gICAgICByZXN1bHQucHVzaChvbGRWYWxbb2xkVmFsLmxlbmd0aCAtIDFdKTtcbiAgICAgIGFkZFRvRGljdGlvbmFyeShvbGRDb2RlLCBvbGRWYWxbb2xkVmFsLmxlbmd0aCAtIDFdKTtcbiAgICAgIG9sZENvZGUgPSBjb2RlO1xuICAgIH1cblxuICAgIGlmIChkaWN0aW9uYXJ5TGVuZ3RoICsgMSA+PSAoMiAqKiBieXRlTGVuZ3RoKSkge1xuICAgICAgaWYgKGJ5dGVMZW5ndGggPT09IE1BWF9CWVRFTEVOR1RIKSB7XG4gICAgICAgIG9sZENvZGUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBieXRlTGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuICAgIGNvZGUgPSBnZXROZXh0KGFycmF5KTtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTFpXRGVjb2RlciBleHRlbmRzIEJhc2VEZWNvZGVyIHtcbiAgZGVjb2RlQmxvY2soYnVmZmVyKSB7XG4gICAgcmV0dXJuIGRlY29tcHJlc3MoYnVmZmVyLCBmYWxzZSkuYnVmZmVyO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=